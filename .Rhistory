n <- numeric(nrow(m))
bplapply(seq_len(nrow(m)), g, BPPARAM = SnowParam())
}
r <- f()
g
g <- function(i, n) {
n[i] <- i
i
}
f <- function() {
m <- matrix(0, 10000, 10000)
n <- numeric(nrow(m))
bplapply(seq_len(nrow(m)), g, n, BPPARAM = SnowParam())
}
f() #Loads ~200MB to each worker
f <- function() {
m <- matrix(0, 1000, 1000)
n <- numeric(nrow(m))
g <- function(i) {
n[i] <- i
i
}
bplapply(seq_len(nrow(m)), g, BPPARAM = SnowParam())
}
f()
f <- function() {
m <- matrix(0, 1000, 1000)
g <- function(i, ...) {
m[i,] <- i
i
}
bplapply(seq_len(nrow(m)), g, BPPARAM = SnowParam())
}
f()
sessionInfo()
f <- function() {
m <- matrix(0, 10000, 10000)
n <- numeric(nrow(m))
g <- function(i) {
n[i] <- i
i
}
bplapply(seq_len(nrow(m)), g, BPPARAM = SnowParam())
}
f() #Loads 206MB to each worker
f <- function() {
m <- matrix(0, 10000, 10000)
g <- function(i, ...) {
m[i,] <- i
i
}
bplapply(seq_len(nrow(m)), g, BPPARAM = SnowParam())
}
f <- function() {
m <- matrix(0, 10000, 10000)
g <- function(i, ...) {
m[i,] <- i
i
}
bplapply(seq_len(nrow(m)), g, BPPARAM = SnowParam())
}
f() #Loads 236MB to each worker
source('~/GitHub/Proves/RHermes/R/OptScanSearch.R')
library(RHermes)
myHermes <- readRDS("D:/AndreaPlasmaPos.rds")
knitr::opts_knit$set(root.dir = "../")  # with something else than `getwd()`
library(RHermes)
require(enviPat)
library(igraph)
require(mzR)
require(magrittr)
require(doParallel)
require(CHNOSZ)
require(ggplot2)
require(tidyverse)
library(doSNOW)
library(data.table)
library(keras)
library(BiocParallel)
myHermes@metadata@cluster <- SnowParam(3)
dir <- "D:/ABrunner Plasma/"
fil <- list.files(dir, pattern = ".*pos.*.mzML", full.names = TRUE)[c(1,3,5)]
myHermes <- FileProc(myHermes, files = fil)
View(myHermes)
BiocParallel::bpvalidate(RHermes:::calculate_ionic_forms)
magrittr::.
magrittr::`.`
strsplit("nepe", split = "[", fixed = TRUE) %>%
vapply(function(x) {x[[2]]}, FUN.VALUE = character(1))
library(magrittr)
strsplit("nepe", split = "[", fixed = TRUE) %>%
vapply(function(x) {x[[2]]}, FUN.VALUE = character(1))
strsplit("[nepe]", split = "[", fixed = TRUE) %>%
vapply(function(x) {x[[2]]}, FUN.VALUE = character(1))
BiocParallel::bpvalidate(RHermes:::sumform)
BiocParallel::bpvalidate(RHermes:::calculate_ionic_forms)
library(RHermes)
BiocParallel::bpvalidate(RHermes:::calculate_ionic_forms)
BiocParallel::bpvalidate(RHermes:::isocalc_parallel)
library(BiocParallel)
SnowParam()
SnowParam()$workers
pblapply()
bpvalidate(RHermes:::density_Interpreter)
bpvalidate(density_Interpreter)
bpvalidate(parallel_Interpreter)
source('~/GitHub/Proves/RHermes/R/DensityInterpreter.R')
bpvalidate(parallel_Interpreter)
devtools::install()
devtools::install()
bpvalidate(RHermes:::parallelFilter)
bpvalidate(RHermes:::parallelInterpreter)
data.table::`.`
bpvalidate(RHermes:::retrievePeaks)
devtools::install()
devtools::install()
myHermes <- readRDS("D:/AndreaPlasmaPos.rds")
View(myHermes)
s <- getSOIpar("double")
knitr::opts_knit$set(root.dir = "../")  # with something else than `getwd()`
library(RHermes)
require(enviPat)
library(igraph)
require(mzR)
require(magrittr)
require(doParallel)
require(CHNOSZ)
require(ggplot2)
require(tidyverse)
library(doSNOW)
library(data.table)
library(keras)
library(BiocParallel)
s <- getSOIpar("double")
myHermes@metadata@cluster <- SnowParam(3)
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
myHermes@metadata@cluster
source('~/GitHub/Proves/RHermes/R/SOIfinder.R')
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
devtools::install()
BiocParallel::multicoreWorkers()
BiocParallel::snowWorkers()
BiocParallel::bpworkers()
?BiocParallel::bpworkers
?detectCores()
detectCores()
snowWorkers()
?snowWorkers()
myHermes <- readRDS("D:/AndreaPlasmaPos.rds")
myHermes@metadata@cluster <- SnowParam(3)
s <- getSOIpar("double")
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
View(myHermes)
View(myHermes@data@PL[[3]]@peaklist)
devtools::install()
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
View(myHermes)
myHermes@metadata@cluster
bpvalidate(RHermes:::densityFilter)
bpvalidate(RHermes:::parallelFilter)
library(RHermes)
Sys.info()
Sys.info()$sysname
Sys.info()[1]
Sys.info()["sysname"]
knitr::opts_knit$set(root.dir = "../")  # with something else than `getwd()`
library(RHermes)
require(enviPat)
library(igraph)
require(mzR)
require(magrittr)
require(doParallel)
require(CHNOSZ)
require(ggplot2)
require(tidyverse)
library(doSNOW)
library(data.table)
library(keras)
library(BiocParallel)
myHermes <- readRDS("D:/AndreaPlasmaPos.rds")
s <- getSOIpar("double")
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
myHermes@metadata@cluster <- SnowParam(3)
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
devtools::install()
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
devtools::install()
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
data.table::match
?match
devtools::install()
myHermes@metadata@cluster <- SnowParam(5)
myHermes <- SOIfinder(myHermes, params = s, fileID = c(3),
against = c(2))
devtools::install()
knitr::opts_knit$set(root.dir = "../")  # with something else than `getwd()`
library(RHermes)
require(enviPat)
library(igraph)
require(mzR)
require(magrittr)
require(doParallel)
require(CHNOSZ)
require(ggplot2)
require(tidyverse)
library(doSNOW)
library(data.table)
library(keras)
library(BiocParallel)
# setwd("../") #For unknitted use of the chunk
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 3.5, res = 120000, instr = "Orbitrap", minmz = 50, maxmz = 1200))
negHermes <- RHermesExp()
negHermes <- setExpParam(negHermes, params = ExpParam(ppm = 3.5, res = 120000,
instr = "Orbitrap", minmz = 50,
maxmz = 1200, ion = "-"))
readTime(myHermes)
setwd("../") #For unknitted use of the chunk
myHermes <- setDB(myHermes, "custom", filename = "D:/MS1_2ID/MS1_2ID.csv") #Default HMDB, single charged, monomeric adducts
View(myHermes)
View(myHermes)
adlist <- adductTables()[[2]]
# myHermes <- remAd(myHermes, c(adlist[grep(x = adlist, pattern = "Iso")], adlist[grep(x = adlist, pattern = "DMSO")]))
negHermes <- setDB(negHermes, "custom", filename = "D:/MS1_2ID/MS1_2ID.csv") #Default HMDB, single charged, monomeric adducts
adlist <- adductTables()[[1]]
# negHermes <- remAd(negHermes, c(adlist[grep(x = adlist, pattern = "Iso")], adlist[grep(x = adlist, pattern = "DMSO")]))
readTime(myHermes)
dir <- "D:/ABrunner Plasma/"
fil <- list.files(dir, pattern = ".*pos.*.mzML", full.names = TRUE)[c(1,3,5)]
myHermes <- FileProc(myHermes, files = fil)
bpvalidate(RHermes:::calculate_ionic_forms)
bpvalidate(RHermes:::sumform)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
?`%in%`
devtools::install()
?names
myHermes <- FileProc(myHermes, files = fil)
f1 <- "C6H12O6"
f2 <- "H2O"
f1 <- CHNOSZ::makeup(f1)
n1 <- names(f1)
f2 <- CHNOSZ::makeup(f2)
n2 <- names(f2)
View(adducts)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
CHNOSZ::makeup()
CHNOSZ::makeup
CHNOSZ::makeup("C6H12O6",multiplier = 2)
CHNOSZ::makeup("C6H12O6",multiplier = 5)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
length[2]
lapply[2]
myHermes <- FileProc(myHermes, files = fil)
CHNOSZ::makeup
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
CHNOSZ::makeup
##Taken directly from CHNOSZ and modified the input variable name from formula
##to f in order to avoid collision with stats::formula when calling from inside
##a bplapply
makeup <- function (f, multiplier = 1, sum = FALSE, count.zero = FALSE)
{
if (is.matrix(f))
return(lapply(seq_len(nrow(f)), function(i) makeup(f[i,
])))
if (!is.null(names(f)) & is.numeric(f))
return(f)
if (is.list(f) & !is.null(names(f[[1]])))
return(f)
if (length(multiplier) > 1 & length(multiplier) != length(f))
stop("multiplier does not have length = 1 or length = number of formulas")
multiplier <- rep(multiplier, length(f))
if (length(f) > 1) {
f <- CHNOSZ:::get.formula(f)
out <- lapply(seq_along(), function(i) {
makeup(f[i], multiplier[i])
})
if (sum) {
out <- unlist(out)
out <- tapply(out, names(out), sum)
}
else if (count.zero) {
em0 <- unlist(out)
em0 <- em0[!is.na(em0)]
em0 <- tapply(em0, names(em0), sum)
em0[] <- 0
emNA <- em0
emNA[] <- NA
out <- lapply(out, function(x) {
if (anyNA(x))
emNA
else {
xem <- c(x, em0)
tapply(xem, names(xem), sum)
}
})
}
return(out)
}
if (exists("CHNOSZ")) {
thermo <- get("thermo", CHNOSZ)
if (is.numeric(f))
f <- thermo$obigt$formula[f]
}
cc <- CHNOSZ:::count.charge(f)
f <- cc$uncharged
if (cc$Z != 0)
f <- paste(f, "Z", cc$Z, sep = "")
if (length(grep("(\\(|\\)|\\*|\\:)", f)) == 0) {
out <- CHNOSZ:::count.elements(f)
}
else {
cf <- CHNOSZ:::count.formulas(f)
ce <- lapply(names(cf), count.elements)
mcc <- lapply(seq_along(cf), function(i) ce[[i]] * cf[i])
um <- unlist(mcc)
out <- unlist(tapply(um, names(um), sum, simplify = FALSE))
}
out <- out * multiplier
if (exists("CHNOSZ")) {
are.elements <- names(out) %in% thermo$element$element
if (!all(are.elements))
warning(paste("element(s) not in thermo$element:",
paste(names(out)[!are.elements], collapse = " ")))
}
return(out)
}
makeup("C6H12O6")
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
myHermes@metadata@cluster <- SerialParam()
myHermes <- FileProc(myHermes, files = fil)
warnings()
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
myHermes@metadata@cluster <- SnowParam(3)
myHermes <- FileProc(myHermes, files = fil)
CHNOSZ:::count.elements("C6")
CHNOSZ:::count.elements("C6H12")
CHNOSZ:::count.elements("C6H12O6")
CHNOSZ:::count.elements("C6H12O61")
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
View(myHermes)
CHNOSZ:::count.elements
?stop
devtools::install()
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
library(RHermes)
myHermes <- FileProc(myHermes, files = fil)
View(isotopes)
View(myHermes)
bpvalidate(PLparallelfun)
bpvalidate(RHermes:::PLparallelfun)
View(myHermes)
bpvalidate(RHermes:::regularProc)
devtools::install()
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
library(RHermes)
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- readRDS("D:/AndreaPlasmaPos.rds")
myHermes@metadata@cluster <- SnowParam(4)
knitr::opts_knit$set(root.dir = "../")  # with something else than `getwd()`
library(RHermes)
require(enviPat)
library(igraph)
require(mzR)
require(magrittr)
require(doParallel)
require(CHNOSZ)
require(ggplot2)
require(tidyverse)
library(doSNOW)
library(data.table)
library(keras)
library(BiocParallel)
myHermes@metadata@cluster <- SnowParam(4)
dir <- "D:/ABrunner Plasma/"
fil <- list.files(dir, pattern = ".*pos.*.mzML", full.names = TRUE)[c(1,3,5)]
myHermes <- FileProc(myHermes, files = fil)
View(myHermes)
library(BiocParallel)
bpvalidate(RHermes::PlotlyIsoFidelity)
RHermes::RHermesGUI()
library(BiocParallel)
devtools::install()
RHermesGUI()
devtools::install()
RHermesGUI()
devtools::install()
RHermesGUI()
RHermesGUI()
source('~/GitHub/Proves/RHermes/R/Settings_UI.R')
RHermesGUI()
devtools::install()
devtools::install()
RHermesGUI()
RHermesGUI()
RHermesGUI()
source('~/GitHub/Proves/RHermes/R/PL_UI.R')
RHermesGUI()
devtools::install()
RHermesGUI()
RHermesGUI()
RHermesGUI()
devtools::install()
RHermesGUI()
source('~/GitHub/Proves/RHermes/R/IonicForm.R')
testthat::test_file("./tests/testthat/test-prePL.R", env = globalenv())
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
devtools::install()
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-PL.R")
ms1data <- RHermes:::import_and_filter(lf = system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
View(ms1data)
View(ms1data)
testthat::test_file("./tests/testthat/test-PL.R")
testthat::test_file("./tests/testthat/test-PL.R")
testthat::test_file("./tests/testthat/test-PL.R")
SerialParam()$workers
SerialParam()$workers[[1]]
SerialParam()
d <- SerialParam()
d$workers
!d$workers
!d$workers[[1]]
is.numeric(d$workers[[1]])
is.numeric(d$workers)
d <- SnowParam()
is.numeric(d$workers)
myHermes <- RHermesExp()
myHermes <- setDB(myHermes, db = "hmdb")
myHermes@metadata@cluster <- BiocParallel::SnowParam(1)
myHermes <- FileProc(myHermes, system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
View(myHermes)
View(myHermes@data@PL[[1]]@peaklist)
usethis::use_coverage()
