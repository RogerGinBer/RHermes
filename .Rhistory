stop("multiplier does not have length = 1 or length = number of formulas")
multiplier <- rep(multiplier, length(f))
if (length(f) > 1) {
f <- CHNOSZ:::get.formula(f)
out <- lapply(seq_along(), function(i) {
makeup(f[i], multiplier[i])
})
if (sum) {
out <- unlist(out)
out <- tapply(out, names(out), sum)
}
else if (count.zero) {
em0 <- unlist(out)
em0 <- em0[!is.na(em0)]
em0 <- tapply(em0, names(em0), sum)
em0[] <- 0
emNA <- em0
emNA[] <- NA
out <- lapply(out, function(x) {
if (anyNA(x))
emNA
else {
xem <- c(x, em0)
tapply(xem, names(xem), sum)
}
})
}
return(out)
}
if (exists("CHNOSZ")) {
thermo <- get("thermo", CHNOSZ)
if (is.numeric(f))
f <- thermo$obigt$formula[f]
}
cc <- CHNOSZ:::count.charge(f)
f <- cc$uncharged
if (cc$Z != 0)
f <- paste(f, "Z", cc$Z, sep = "")
if (length(grep("(\\(|\\)|\\*|\\:)", f)) == 0) {
out <- CHNOSZ:::count.elements(f)
}
else {
cf <- CHNOSZ:::count.formulas(f)
ce <- lapply(names(cf), count.elements)
mcc <- lapply(seq_along(cf), function(i) ce[[i]] * cf[i])
um <- unlist(mcc)
out <- unlist(tapply(um, names(um), sum, simplify = FALSE))
}
out <- out * multiplier
if (exists("CHNOSZ")) {
are.elements <- names(out) %in% thermo$element$element
if (!all(are.elements))
warning(paste("element(s) not in thermo$element:",
paste(names(out)[!are.elements], collapse = " ")))
}
return(out)
}
makeup("C6H12O6")
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
myHermes@metadata@cluster <- SerialParam()
myHermes <- FileProc(myHermes, files = fil)
warnings()
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
myHermes@metadata@cluster <- SnowParam(3)
myHermes <- FileProc(myHermes, files = fil)
CHNOSZ:::count.elements("C6")
CHNOSZ:::count.elements("C6H12")
CHNOSZ:::count.elements("C6H12O6")
CHNOSZ:::count.elements("C6H12O61")
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
View(myHermes)
CHNOSZ:::count.elements
?stop
devtools::install()
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
library(RHermes)
myHermes <- FileProc(myHermes, files = fil)
View(isotopes)
View(myHermes)
bpvalidate(PLparallelfun)
bpvalidate(RHermes:::PLparallelfun)
View(myHermes)
bpvalidate(RHermes:::regularProc)
devtools::install()
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
ram <- system2("wmic", args =  "OS get FreePhysicalMemory /Value",
stdout = TRUE)
ram <- ram[grepl("FreePhysicalMemory", ram)]
ram <- gsub("FreePhysicalMemory=", "", ram, fixed = TRUE)
ram <- gsub("\r", "", ram, fixed = TRUE)
ram <- as.integer(ram)
devtools::install()
myHermes <- FileProc(myHermes, files = fil)
library(RHermes)
myHermes <- FileProc(myHermes, files = fil)
devtools::install()
myHermes <- readRDS("D:/AndreaPlasmaPos.rds")
myHermes@metadata@cluster <- SnowParam(4)
knitr::opts_knit$set(root.dir = "../")  # with something else than `getwd()`
library(RHermes)
require(enviPat)
library(igraph)
require(mzR)
require(magrittr)
require(doParallel)
require(CHNOSZ)
require(ggplot2)
require(tidyverse)
library(doSNOW)
library(data.table)
library(keras)
library(BiocParallel)
myHermes@metadata@cluster <- SnowParam(4)
dir <- "D:/ABrunner Plasma/"
fil <- list.files(dir, pattern = ".*pos.*.mzML", full.names = TRUE)[c(1,3,5)]
myHermes <- FileProc(myHermes, files = fil)
View(myHermes)
library(BiocParallel)
bpvalidate(RHermes::PlotlyIsoFidelity)
RHermes::RHermesGUI()
library(BiocParallel)
devtools::install()
RHermesGUI()
devtools::install()
RHermesGUI()
devtools::install()
RHermesGUI()
RHermesGUI()
source('~/GitHub/Proves/RHermes/R/Settings_UI.R')
RHermesGUI()
devtools::install()
devtools::install()
RHermesGUI()
RHermesGUI()
RHermesGUI()
source('~/GitHub/Proves/RHermes/R/PL_UI.R')
RHermesGUI()
devtools::install()
RHermesGUI()
RHermesGUI()
RHermesGUI()
devtools::install()
RHermesGUI()
source('~/GitHub/Proves/RHermes/R/IonicForm.R')
testthat::test_file("./tests/testthat/test-prePL.R", env = globalenv())
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
devtools::install()
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-prePL.R")
testthat::test_file("./tests/testthat/test-PL.R")
ms1data <- RHermes:::import_and_filter(lf = system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
View(ms1data)
View(ms1data)
testthat::test_file("./tests/testthat/test-PL.R")
testthat::test_file("./tests/testthat/test-PL.R")
testthat::test_file("./tests/testthat/test-PL.R")
SerialParam()$workers
SerialParam()$workers[[1]]
SerialParam()
d <- SerialParam()
d$workers
!d$workers
!d$workers[[1]]
is.numeric(d$workers[[1]])
is.numeric(d$workers)
d <- SnowParam()
is.numeric(d$workers)
myHermes <- RHermesExp()
myHermes <- setDB(myHermes, db = "hmdb")
myHermes@metadata@cluster <- BiocParallel::SnowParam(1)
myHermes <- FileProc(myHermes, system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
View(myHermes)
View(myHermes@data@PL[[1]]@peaklist)
usethis::use_coverage()
usethis::use_coverage()
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site(preview = TRUE)
library(pkgdown)
library(pkgdown)
pkgdown::clean_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::build_reference()
source("./R/SOIplotUI.R")
system.file("extdata",package = "RHermes")
list.files(system.file("extdata", package = "RHermes"))
list.files(system.file("app", package = "RHermes"))
list.files(system.file("app", package = "RHermes"), pattern = "UI")
devtools::install()
devtools::install()
for(i in list.files(system.file("app", package = "RHermes"), pattern = "UI",
full.names = TRUE)){
source(i)
}
devtools::install()
for(i in list.files(system.file("app", package = "RHermes"), pattern = "UI",
full.names = TRUE)){
source(i)
}
shiny::runApp('inst/app')
runApp('inst/app')
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
library(BiocParallel)
require(CHNOSZ)
require(magrittr)
library(data.table)
require(tidyverse)
myHermes <- genIL(myHermes, 1, ILParam())
myHermes <- genIL(myHermes, 1, ILParam(filtermz = 0.1, priorization = "full"))
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
library(BiocParallel)
require(CHNOSZ)
require(magrittr)
library(data.table)
require(tidyverse)
myHermes <- genIL(myHermes, 1, ILParam())
View(myHermes)
saveRDS(myHermes, file = "testIL.rds")
length(list.files("D:/ABrunner Plasma/"))
length(list.files("D:/ABrunner Plasma/"))
length(list.files("D:/ABrunner Plasma"))
length(list.files("D:/ABrunner Plasma"))
MS2files <- list.files("D:/ABrunner Plasma/MS2Data/")
MS2files <- list.files("D:/ABrunner Plasma/MS2Data/", ".*pos.*mzML")
MS2files <- list.files("D:/ABrunner Plasma/MS2Data/", pattern = ".*pos.mzML")
MS2files <- list.files("D:/ABrunner Plasma/MS2Data/", pattern = "*.pos.mzML")
list.files("D:/ABrunner Plasma/MS2data", pattern = ".*pos.*.mzML", full.names = TRUE)
MS2files <- list.files("D:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)
myHermes <- readRDS(system.file("extdata", "testIL.rds",
package = "RHermes"))
devtools::install()
myHermes <- readRDS(system.file("extdata", "testIL.rds",
package = "RHermes"))
MS2files <- list.files("D:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)
myHermes <- MS2Proc(myHermes, 1, MS2files,
referenceDB = "D:/sp_MS2ID_RogerGB.RData")
View(myHermes)
View(myHermes@data@MS2Exp[[1]]@IL@IL)
devtools::install()
myHermes <- MS2Proc(myHermes, 1, MS2files,
referenceDB = "D:/sp_MS2ID_RogerGB.RData")
View(myHermes)
View(myHermes@data@MS2Exp[[1]]@IL@IL)
View(myHermes)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]]) == 34)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]]),  34)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]]),  39)
View(myHermes)
saveRDS(myHermes, file = "withIdent.rds")
?file.remove
devtools::install()
devtools::install()
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
data.frame(rt = seq(1,10), rtiv = seq(1,10)^2)
cosineSim(data.frame(rt = seq(1,10), rtiv = seq(1,10)^2),
data.frame(rt = seq(1,10), rtiv = seq(1,10)^3))
expect_equal(cos, 0.986387, tolerance = 1e-4)
cos <- cosineSim(data.frame(rt = seq(1,10), rtiv = seq(1,10)^2),
data.frame(rt = seq(1,10), rtiv = seq(1,10)^3))
expect_equal(cos, 0.986387, tolerance = 1e-4)
myHermes <- readRDS(system.file("extdata", "withIdent.rds",
package = "RHermes"))
View(myHermes)
RHermes::PlotlyMirrorPlot(myHermes, 1, 1)
p <- RHermes::PlotlyMirrorPlot(myHermes, 1, 1)
class(p)
p <- RHermes::PlotlyRawMS2Plot(myHermes, 1, 1, bymz = TRUE)
p <- RHermes::PlotlyRawMS2Plot(myHermes, ms2id = 1, entryid = 1, bymz = TRUE)
View(myHermes)
p <- RHermes::PlotlyRawMS2Plot(myHermes, ms2id = 1, entryid = 2, bymz = TRUE)
p <- RHermes::PlotlyRawMS2Plot(myHermes, ms2id = 1, entryid = 3, bymz = TRUE)
View(myHermes)
p <- RHermes::PlotlyRawMS2Plot(myHermes, ms2id = 1, entryid = 4, bymz = TRUE)
p2 <- RHermes::PlotlyRawMS2Plot(myHermes, 1, 4, bymz = FALSE)
p <- RHermes::PlotlyRawMS2Plot(myHermes, ms2id = 1, entryid = 4, bymz = TRUE)
p2 <- RHermes::PlotlyRawMS2Plot(myHermes, 1, 4, bymz = FALSE)
expect_condition(is(p, "plotly") & is(p2, "plotly"))
expect_true(is(p, "plotly") & is(p2, "plotly"))
is(p, "plotly")
p
expect_true(is(p[[1]], "plotly") & is(p[[2]], "plotly"))
p[[1]]
class(p[[1]])
is(p[[1]], "plotly")
is(p[[2]], "plotly")
class(p[[2]])
expect_true(is(p[[1]], "plotly") & is(p[[2]], "visNetwork"))
expect_true(is(p2[[1]], "plotly") & is(p2[[2]], "visNetwork"))
p <- RHermes:::coveragePlot(myHermes, 1)
p
expect_true(is(p[[1]], "plotly") & is(p[[2]], "plotly"))
p <- RHermes:::PlotlyPLPlot(myHermes, 1, "C6H12O6", rtrange = c(0,1500),
dynamicaxis = TRUE, ads = c("M+Na"))
p
myHermes <- RHermes::PlotlySoiPlot(myHermes, 1, "C6H12O6",
rtrange = c(0,1500), dynamicaxis = TRUE,
ads = "M+Na")
myHermes <- readRDS(system.file("extdata", "afterSOI.rds" ,
package = "RHermes"))
p <- RHermes::PlotlySoiPlot(myHermes, 1, "C6H12O6",
rtrange = c(0,1500), dynamicaxis = TRUE,
ads = "M+Na")
expect_true(is(p, "plotly"))
myHermes <- readRDS(system.file("extdata", "afterSOI.rds" ,
package = "RHermes"))
myHermes <- SOIcleaner(myHermes, 1, 50000, TRUE)
View(myHermes)
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
library(BiocParallel)
require(CHNOSZ)
require(magrittr)
library(data.table)
require(tidyverse)
myHermes <- SOIcleaner(myHermes, 1, 50000, TRUE)
myHermes <- genIL(myHermes, 1, ILParam(filtermz = 0.1,
priorization = "yes", "M+H"))
myHermes <- genIL(myHermes, 1, ILParam(filtermz = 0.1,
priorization = "yes", ad = "M+H"))
View(myHermes)
nrow(myHermes@data@MS2Exp[[1]]@IL)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@IL@IL), 6)
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
library(BiocParallel)
require(CHNOSZ)
require(magrittr)
library(data.table)
require(tidyverse)
myHermes <- genIL(myHermes, 1, ILParam())
myHermes <- genIL(myHermes, 1, ILParam(filtermz = 0.1, priorization = "full"))
View(p)
View(myHermes)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@IL@IL), 27)
expect_equal(nrow(myHermes@data@MS2Exp[[2]]@IL@IL), 113)
exportIL(myHermes, 1, folder = getwd(), maxOver = 5, sepFiles = FALSE)
myHermes <- genIL(myHermes, 1, ILParam())
exportIL(myHermes, 1, folder = getwd(), maxOver = 5, sepFiles = FALSE)
exportIL(myHermes, id = 1, folder = getwd(), maxOver = 5, sepFiles = FALSE)
View(myHermes)
devtools::install()
exportIL(myHermes, id = 1, folder = getwd(), maxOver = 5, sepFiles = FALSE)
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
library(RHermes)
getwd()
file.remove(c("./ExportedIL.csv", paste("Injection", seq(1,5), sep = "_")))
file.remove(c("./ExportedIL.csv", paste("./Injection", seq(1,5), sep = "_")))
test_that("IL can be exported", {
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
library(BiocParallel)
require(CHNOSZ)
require(magrittr)
library(data.table)
require(tidyverse)
myHermes <- genIL(myHermes, 1, ILParam())
exportIL(myHermes, id = 1, folder = getwd(), maxOver = 5, sepFiles = FALSE)
exportIL(myHermes, id = 1, folder = getwd(), maxOver = 5, sepFiles = TRUE)
file.remove(c("./ExportedIL.csv", paste("./Injection", seq(1,5), sep = "_")))
succeed()
})
devtools::install()
auto_test_package()
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 10, res = 120000))
myHermes <- addAd(myHermes, "M+Cs", deltam = 132.905, ch = 1,  mult = 1,
toadd = "Cs")
myHermes <- setDB(myHermes)
myHermes <- addAd(myHermes, "M+Cs", deltam = 132.905, ch = 1,  mult = 1,
toadd = "Cs")
myHermes <- remAd(myHermes, "M+H")
expect_warning(remAd(myHermes, "M+2Rb"))
myHermes <- setDB(myHermes)
myHermes <- addAd(myHermes, "M+Cs", deltam = 132.905, ch = 1,  mult = 1,
toadd = "Cs")
expect_warning(addAd(myHermes, "M+Cs", deltam = 132.905, ch = 0,  mult = 1,
toadd = "Cs"))
myHermes <- remAd(myHermes, "M+H")
expect_warning(remAd(myHermes, "M+2Rb"))
expect_warning(remAd(myHermes, "M+H"))
expect_warning(remAd(myHermes, "M+H"))
expect_warning(remAd(myHermes, "M+H"))
myHermes <- readRDS(system.file("extdata", "withIdent.rds",
package = "RHermes"))
show(myHermes)
expect_message(readTime(myHermes), regexp = ".")
myHermes <- setExpParam(myHermes, template = "orbi-pos")
expect_warning(setExpParam(myHermes, template = c("orbi-pos", "orbi-neg")))
expect_error(setExpParam(myHermes, template = c("invalidTemplate")))
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 10, ion = "-"))
expect_warning(remAd(myHermes, "M+H"))
myHermes <- setDB(myHermes)
myHermes <- addAd(myHermes, "M+Cs", deltam = 132.905, ch = 1,  mult = 1,
toadd = "Cs")
expect_warning(addAd(myHermes, "M+Cs", deltam = 132.905, ch = 0,  mult = 1,
toadd = "Cs"))
remAd(myHermes, "M+H")
expect_warning(remAd(myHermes, "M+2Rb"))
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
cos <- SOIcos(myHermes, 1)
myHermes <- SOIcleaner(myHermes, 1, 50000, TRUE)
cos <- SOIcos(myHermes, 1)
devtools::install()
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
myHermes <- SOIcleaner(myHermes, 1, 50000, TRUE)
cos <- SOIcos(myHermes, 1)
devtools::install()
myHermes <- readRDS(system.file("extdata", "afterSOI.rds",
package = "RHermes"))
myHermes <- SOIcleaner(myHermes, 1, 50000, TRUE)
cos <- SOIcos(myHermes, 1)
View(cos)
View(myHermes)
myHermes@data@SOI[[1]]
View(myHermes@data@SOI[[1]]@SoiList)
View(cos)
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
devtools::install()
devtools::install()
covr::codecov(token = "6fed4d19-84e2-4d40-9372-b33293284f9d")
auto_test_package()
covr::package_coverage()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
pkgdown::build_home()
BiocCheck::BiocCheck()
library(RHermes)
?data
source('~/GitHub/RHermes/R/adductTables.R')
adductTables()
adductTables()
library(RHermes)
RHermes::RHermesGUI()
library(covr)
library(testthat)
auto_test_package()
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]]),  16)
RHermes::RHermesGUI()
RHermes::RHermesGUI()
RHermes::RHermesGUI()
RHermes::RHermesGUI()
RHermes::RHermesGUI()
RHermes::RHermesGUI()
