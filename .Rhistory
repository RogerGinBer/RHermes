Ident <- Ident[idx]
IL <- IL[idx, ]
MS2Features <- MS2Features[idx, ]
}
sink(file = paste0(file, ".ms"))
for (i in seq_len(nrow(MS2Features))) {
curentry <- MS2Features[i, ]
fs <- curentry$anot
msms <- curentry$ssdata
#Write into the .ms file
for (j in fs) {
comp <- paste("Spec", idxIL[i], form, sep = "_")
cat(">compound", comp, "\n")
cat(">formula", j, "\n")
cat(">ms2", "\n")
for (j in seq_len(nrow(msms))) {
cat(as.numeric(msms[j, ]), "\n")
}
cat("\n")
}
}
sink()
}
exportSIRIUS(struct, 4, "test")
exportSIRIUS <- function(struct, id, file, whichSpec = NA){
Ident <- struct@data@MS2Exp[[id]]@Ident
IL <- struct@data@MS2Exp[[id]]@IL@IL
MS2Features <- Ident$MS2Features
if(is.null(MS2Features)){
stop("No MS2 spectra found for that MS2Exp ID index")
}
if(!is.na(whichSpec)){
Ident <- Ident[whichSpec]
IL <- IL[whichSpec, ]
MS2Features <- MS2Features[whichSpec, ]
}
sink(file = paste0(file, ".ms"))
for (i in seq_len(nrow(MS2Features))) {
curentry <- MS2Features[i, ]
fs <- curentry$anot
msms <- curentry$ssdata
#Write into the .ms file
for (j in fs) {
comp <- paste("Spec", idxIL[i], form, sep = "_")
cat(">compound", comp, "\n")
cat(">formula", j, "\n")
cat(">ms2", "\n")
for (j in seq_len(nrow(msms))) {
cat(as.numeric(msms[j, ]), "\n")
}
cat("\n")
}
}
sink()
}
exportSIRIUS(struct, 4, "test")
exportSIRIUS <- function(struct, id, file, whichSpec = NA){
Ident <- struct@data@MS2Exp[[id]]@Ident
IL <- struct@data@MS2Exp[[id]]@IL@IL
MS2Features <- Ident$MS2Features
if(is.null(MS2Features)){
stop("No MS2 spectra found for that MS2Exp ID index")
}
if(!is.na(whichSpec)){
Ident <- Ident[whichSpec]
IL <- IL[whichSpec, ]
MS2Features <- MS2Features[whichSpec, ]
}
sink(file = paste0(file, ".ms"))
for (i in seq_len(nrow(MS2Features))) {
curentry <- MS2Features[i, ]
fs <- curentry$anot
msms <- curentry$ssdata
#Write into the .ms file
for (j in fs) {
comp <- paste("Spec", i, form, sep = "_")
cat(">compound", comp, "\n")
cat(">formula", j, "\n")
cat(">ms2", "\n")
for (j in seq_len(nrow(msms))) {
cat(as.numeric(msms[j, ]), "\n")
}
cat("\n")
}
}
sink()
}
exportSIRIUS(struct, 4, "test")
exportSIRIUS <- function(struct, id, file, whichSpec = NA){
Ident <- struct@data@MS2Exp[[id]]@Ident
IL <- struct@data@MS2Exp[[id]]@IL@IL
MS2Features <- Ident$MS2Features
if(is.null(MS2Features)){
stop("No MS2 spectra found for that MS2Exp ID index")
}
if(!is.na(whichSpec)){
Ident <- Ident[whichSpec]
IL <- IL[whichSpec, ]
MS2Features <- MS2Features[whichSpec, ]
}
sink(file = paste0(file, ".ms"))
for (i in seq_len(nrow(MS2Features))) {
curentry <- MS2Features[i, ]
fs <- curentry$anot
msms <- curentry$ssdata
#Write into the .ms file
for (j in fs) {
comp <- paste("Spec", i, j, sep = "_")
cat(">compound", comp, "\n")
cat(">formula", j, "\n")
cat(">ms2", "\n")
for (j in seq_len(nrow(msms))) {
cat(as.numeric(msms[j, ]), "\n")
}
cat("\n")
}
}
sink()
}
exportSIRIUS(struct, 4, "test")
struct <- readRDS("E:/HermesResults/Ecoli/PosResults.rds")
exportSIRIUS(struct, 1, "test")
Ident <- struct@data@MS2Exp[[id]]@Ident
IL <- struct@data@MS2Exp[[id]]@IL@IL
MS2Features <- Ident$MS2Features
if(is.null(MS2Features)){
stop("No MS2 spectra found for that MS2Exp ID index")
}
if(!is.na(whichSpec)){
Ident <- Ident[whichSpec]
IL <- IL[whichSpec, ]
MS2Features <- MS2Features[whichSpec, ]
}
i <- 1
id <- 1
Ident <- struct@data@MS2Exp[[id]]@Ident
IL <- struct@data@MS2Exp[[id]]@IL@IL
MS2Features <- Ident$MS2Features
curentry <- MS2Features[i, ]
View(curentry)
fs <- curentry$anot
fs <- curentry$anot %>% unlist()
msms <- curentry$ssdata
msms <- curentry$ssdata[[1]]
exportSIRIUS <- function(struct, id, file, whichSpec = NA){
Ident <- struct@data@MS2Exp[[id]]@Ident
IL <- struct@data@MS2Exp[[id]]@IL@IL
MS2Features <- Ident$MS2Features
if(is.null(MS2Features)){
stop("No MS2 spectra found for that MS2Exp ID index")
}
if(!is.na(whichSpec)){
Ident <- Ident[whichSpec]
IL <- IL[whichSpec, ]
MS2Features <- MS2Features[whichSpec, ]
}
sink(file = paste0(file, ".ms"))
for (i in seq_len(nrow(MS2Features))) {
curentry <- MS2Features[i, ]
fs <- curentry$anot %>% unlist()
msms <- curentry$ssdata[[1]]
#Write into the .ms file
for (j in fs) {
comp <- paste("Spec", i, j, sep = "_")
cat(">compound", comp, "\n")
cat(">formula", j, "\n")
cat(">ms2", "\n")
for (j in seq_len(nrow(msms))) {
cat(as.numeric(msms[j, ]), "\n")
}
cat("\n")
}
}
sink()
}
exportSIRIUS(struct, 1, "test")
sink()
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
data(isotopes, package = "enviPat", envir = environment())
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
#You could do either of these, but PL it's more direct if you just want to check
#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
myHermes <- findSOI(myHermes, s, 1)
library(RHermes)
myHermes <- findSOI(myHermes, s, 1)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
myHermes <- cleanSOI(myHermes, id = 1, minint = 20000, isofidelity = TRUE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
install.packages("BiocCheck")
BiocManager::install("BiocCheck")
BiocManager::install("BiocCheck")
library(BiocCheck)
BiocCheck()
library(RHermes)
BiocCheck()
BiocCheck()
BiocCheck()
utils::news(package = "RHermes")
BiocCheck()
BiocCheck()
BiocCheck()
library(RHermes)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
ms1data <- RHermes:::import_and_filter(lf = system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
expect_length(ms1data, 3)
nrow(ms1data[[1]])
myHermes <- RHermesExp()
myHermes <- setDB(myHermes, db = "hmdb")
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes <- processMS1(myHermes, system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
nrow(myHermes@data@PL[[1]]@peaklist)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- processMS1(myHermes, system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
expect_equal(nrow(myHermes@data@PL[[2]]@peaklist),
nrow(myHermes@data@PL[[1]]@peaklist))
library(testthat)
expect_equal(nrow(myHermes@data@PL[[2]]@peaklist),
nrow(myHermes@data@PL[[1]]@peaklist))
nrow(myHermes@data@PL[[2]]@peaklist) ==
nrow(myHermes@data@PL[[1]]@peaklist)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- processMS1(myHermes,
system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"),
labelled = TRUE)
View(myHermes)
View(myHermes)
p <- RHermes::plotPL(myHermes, 1, "C3H7NO2", rtrange = c(0,1500),
dynamicaxis = TRUE, ads = NA))
p <- RHermes::plotPL(myHermes, 1, "C3H7NO2", rtrange = c(0,1500),
dynamicaxis = TRUE, ads = NA)
p
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- findSOI(myHermes, getSOIpar(), 1)
nrow(myHermes@data@SOI[[1]]@SOIList)
nrow(myHermes@data@SOI[[w]]@SOIList)
nrow(myHermes@data@SOI[[2]]@SOIList)
library(reticulate)
library(keras)
library(RHermes)
#Can load the model
model <- load_model_hdf5(system.file("extdata",
"ImprovedModel.h5",
package = "RHermes"))
skip_if(!py_available(initialize = TRUE))
expect(py_module_available("keras"), failure_message = "No Keras")
expect(py_module_available("tensorflow"), failure_message = "No TensorFlow")
#Can load the model
model <- load_model_hdf5(system.file("extdata",
"ImprovedModel.h5",
package = "RHermes"))
expect(is(model, "python.builtin.object"),
failure_message = "Model doesn't load")
is(model, "python.builtin.object")
skip_on_bioc()
library(reticulate)
library(keras)
#Has Python, Keras and Tensorflow
skip_if(!py_available(initialize = TRUE))
expect(py_module_available("keras"), failure_message = "No Keras")
expect(py_module_available("tensorflow"), failure_message = "No TensorFlow")
#Can load the model
model <- load_model_hdf5(system.file("extdata",
"ImprovedModel.h5",
package = "RHermes"))
expect(is(model, "python.builtin.object"),
failure_message = "Model doesn't load")
set.seed(1234)
#Does the model work as intended?
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
setkeyv(blank, "formv")
group <- dplyr::tibble(start = c(0,10), end = c(10,20),
peaks = list(
dplyr::tibble(
rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3)
),
dplyr::tibble(
rt = seq(10,20,0.2),
rtiv = rnorm(51, 2e5, 3)
)
), formula = c("foo", "foo"))
#Check that heuristics work
expect_false(RHermes:::firstCleaning(1, group, blank)) #Blank-like
expect_true(RHermes:::firstCleaning(2, group, blank)) #Totally different
#Check that the interpolation works and the network generates the right
#result (0, meaning sample and blank are the "same")
organizeddata <- RHermes:::prepareNetInput(1, group, blank)
organizeddata <- c(organizeddata[1, ], organizeddata[2, ])
organizeddata <- rbind(organizeddata,organizeddata,organizeddata)
organizeddata <- keras::array_reshape(organizeddata,
c(nrow(organizeddata), 400),
order = "C")  #ANN input
q <- model %>% keras::predict_classes(organizeddata)
expect_true(all(q == c(0,0,0)))
})
test_that("SOI plot works", {
myHermes <- RHermesExp()
myHermes@metadata@ExpParam@adlist <- data.frame(adduct = "M+H")
myHermes@data@SOI <- list(RHermesSOI(
SOIList = data.table(),
PlotDF = data.table(rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3),
form = rep("[C6H13O6]+", 51),
isov = rep("M0", 51)),
filename = "foo"
))
myHermes@data@PL <- list(RHermesPL(
peaklist = data.table(rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3),
formv = rep("[C6H13O6]+", 51),
isov = rep("M0", 51)
),
raw = data.table(), filename = "foo"
)
)
myHermes@metadata@ExpParam@ionF <- list(list(),
data.table(f = "C6H12O6",
ion = "[C6H13O6]+",
an = "M+H"))
p <- RHermes::plotSOI(myHermes, 1, "C6H12O6",
rtrange = c(0,1500), dynamicaxis = TRUE,
ads = "M+H")
expect_true(is(p, "plotly"))
model
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
setkeyv(blank, "formv")
group <- dplyr::tibble(start = c(0,10), end = c(10,20),
peaks = list(
dplyr::tibble(
rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3)
),
dplyr::tibble(
rt = seq(10,20,0.2),
rtiv = rnorm(51, 2e5, 3)
)
), formula = c("foo", "foo"))
expect_false(RHermes:::firstCleaning(1, group, blank)) #Blank-like
expect_true(RHermes:::firstCleaning(2, group, blank)) #Totally different
#Does the model work as intended?
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
library(data.table)
#Does the model work as intended?
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
setkeyv(blank, "formv")
group <- dplyr::tibble(start = c(0,10), end = c(10,20),
peaks = list(
dplyr::tibble(
rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3)
),
dplyr::tibble(
rt = seq(10,20,0.2),
rtiv = rnorm(51, 2e5, 3)
)
), formula = c("foo", "foo"))
#Check that heuristics work
expect_false(RHermes:::firstCleaning(1, group, blank)) #Blank-like
expect_true(RHermes:::firstCleaning(2, group, blank)) #Totally different
#Check that the interpolation works and the network generates the right
#result (0, meaning sample and blank are the "same")
organizeddata <- RHermes:::prepareNetInput(1, group, blank)
organizeddata <- c(organizeddata[1, ], organizeddata[2, ])
organizeddata <- rbind(organizeddata,organizeddata,organizeddata)
organizeddata <- keras::array_reshape(organizeddata,
c(nrow(organizeddata), 400),
order = "C")  #ANN input
q <- model %>% keras::predict_classes(organizeddata)
expect_true(all(q == c(0,0,0)))
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- generateIL(myHermes, 1, ILParam(filtermz = 0.1,
priorization = "yes", ad = "M+H"))
nrow(myHermes@data@MS2Exp[[1]]@IL@IL)
nrow(myHermes@data@MS2Exp[[2]]@IL@IL)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("D:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:5]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
referenceDB = "D:/MS2ID_B2R_20201113_083214.rds",
useDB = TRUE)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("E:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:5]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
referenceDB = "D:/MS2ID_B2R_20201113_083214.rds",
useDB = TRUE)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("E:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:5]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
useDB = FALSE)
nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]])
nrow(myHermes@data@MS2Exp[[2]]@Ident[[1]])
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
nrow(myHermes@data@MS2Exp[[2]]@Ident[[1]])
nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]])
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("E:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:9]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
useDB = FALSE)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]]),  7)
nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]])
nrow(myHermes@data@MS2Exp[[2]]@Ident[[1]])
p <- RHermes::RawMS2Plot(myHermes, ms2id = 2)
p <- RHermes::plotRawMS2(myHermes, ms2id = 2)
p <- RHermes::plotRawMS2(myHermes, ms2id = 1, entryid = 2)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
cos <- SOIcos(myHermes, 1)
myHermes <- removeSOI(myHermes, 1)
succeed()
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- removeSOI(myHermes, 1)
succeed()
covr::codecov()
covr::package_coverage()
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- cleanSOI(myHermes, 1, 20000, TRUE)
#Performs equal to the precalculated version
nrow(myHermes@data@SOI[[1]]@SOIList)
RHermes:::setCluster()
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
covr::package_coverage()
covr::package_coverage()
BiocCheck::BiocCheck()
?BiocCheck::BiocCheck
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
struct <- readRDS(system.file("extdata", "exampleObject.rds",                       package = "RHermes"))
View(struct)
plotFidelity(struct, 1, 1)
View(struct)
View(struct@data@SOI[[1]]@SOIList)
plotFidelity(struct, 1, 9)
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
?plotSOI
