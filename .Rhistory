#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
myHermes <- findSOI(myHermes, s, 1)
library(RHermes)
myHermes <- findSOI(myHermes, s, 1)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
myHermes <- cleanSOI(myHermes, id = 1, minint = 20000, isofidelity = TRUE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
install.packages("BiocCheck")
BiocManager::install("BiocCheck")
BiocManager::install("BiocCheck")
library(BiocCheck)
BiocCheck()
library(RHermes)
BiocCheck()
BiocCheck()
BiocCheck()
utils::news(package = "RHermes")
BiocCheck()
BiocCheck()
BiocCheck()
library(RHermes)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
ms1data <- RHermes:::import_and_filter(lf = system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
expect_length(ms1data, 3)
nrow(ms1data[[1]])
myHermes <- RHermesExp()
myHermes <- setDB(myHermes, db = "hmdb")
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes <- processMS1(myHermes, system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
nrow(myHermes@data@PL[[1]]@peaklist)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- processMS1(myHermes, system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"))
expect_equal(nrow(myHermes@data@PL[[2]]@peaklist),
nrow(myHermes@data@PL[[1]]@peaklist))
library(testthat)
expect_equal(nrow(myHermes@data@PL[[2]]@peaklist),
nrow(myHermes@data@PL[[1]]@peaklist))
nrow(myHermes@data@PL[[2]]@peaklist) ==
nrow(myHermes@data@PL[[1]]@peaklist)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- processMS1(myHermes,
system.file("extdata",
"MS1TestData.mzML",
package = "RHermes"),
labelled = TRUE)
View(myHermes)
View(myHermes)
p <- RHermes::plotPL(myHermes, 1, "C3H7NO2", rtrange = c(0,1500),
dynamicaxis = TRUE, ads = NA))
p <- RHermes::plotPL(myHermes, 1, "C3H7NO2", rtrange = c(0,1500),
dynamicaxis = TRUE, ads = NA)
p
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- findSOI(myHermes, getSOIpar(), 1)
nrow(myHermes@data@SOI[[1]]@SOIList)
nrow(myHermes@data@SOI[[w]]@SOIList)
nrow(myHermes@data@SOI[[2]]@SOIList)
library(reticulate)
library(keras)
library(RHermes)
#Can load the model
model <- load_model_hdf5(system.file("extdata",
"ImprovedModel.h5",
package = "RHermes"))
skip_if(!py_available(initialize = TRUE))
expect(py_module_available("keras"), failure_message = "No Keras")
expect(py_module_available("tensorflow"), failure_message = "No TensorFlow")
#Can load the model
model <- load_model_hdf5(system.file("extdata",
"ImprovedModel.h5",
package = "RHermes"))
expect(is(model, "python.builtin.object"),
failure_message = "Model doesn't load")
is(model, "python.builtin.object")
skip_on_bioc()
library(reticulate)
library(keras)
#Has Python, Keras and Tensorflow
skip_if(!py_available(initialize = TRUE))
expect(py_module_available("keras"), failure_message = "No Keras")
expect(py_module_available("tensorflow"), failure_message = "No TensorFlow")
#Can load the model
model <- load_model_hdf5(system.file("extdata",
"ImprovedModel.h5",
package = "RHermes"))
expect(is(model, "python.builtin.object"),
failure_message = "Model doesn't load")
set.seed(1234)
#Does the model work as intended?
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
setkeyv(blank, "formv")
group <- dplyr::tibble(start = c(0,10), end = c(10,20),
peaks = list(
dplyr::tibble(
rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3)
),
dplyr::tibble(
rt = seq(10,20,0.2),
rtiv = rnorm(51, 2e5, 3)
)
), formula = c("foo", "foo"))
#Check that heuristics work
expect_false(RHermes:::firstCleaning(1, group, blank)) #Blank-like
expect_true(RHermes:::firstCleaning(2, group, blank)) #Totally different
#Check that the interpolation works and the network generates the right
#result (0, meaning sample and blank are the "same")
organizeddata <- RHermes:::prepareNetInput(1, group, blank)
organizeddata <- c(organizeddata[1, ], organizeddata[2, ])
organizeddata <- rbind(organizeddata,organizeddata,organizeddata)
organizeddata <- keras::array_reshape(organizeddata,
c(nrow(organizeddata), 400),
order = "C")  #ANN input
q <- model %>% keras::predict_classes(organizeddata)
expect_true(all(q == c(0,0,0)))
})
test_that("SOI plot works", {
myHermes <- RHermesExp()
myHermes@metadata@ExpParam@adlist <- data.frame(adduct = "M+H")
myHermes@data@SOI <- list(RHermesSOI(
SOIList = data.table(),
PlotDF = data.table(rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3),
form = rep("[C6H13O6]+", 51),
isov = rep("M0", 51)),
filename = "foo"
))
myHermes@data@PL <- list(RHermesPL(
peaklist = data.table(rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3),
formv = rep("[C6H13O6]+", 51),
isov = rep("M0", 51)
),
raw = data.table(), filename = "foo"
)
)
myHermes@metadata@ExpParam@ionF <- list(list(),
data.table(f = "C6H12O6",
ion = "[C6H13O6]+",
an = "M+H"))
p <- RHermes::plotSOI(myHermes, 1, "C6H12O6",
rtrange = c(0,1500), dynamicaxis = TRUE,
ads = "M+H")
expect_true(is(p, "plotly"))
model
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
setkeyv(blank, "formv")
group <- dplyr::tibble(start = c(0,10), end = c(10,20),
peaks = list(
dplyr::tibble(
rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3)
),
dplyr::tibble(
rt = seq(10,20,0.2),
rtiv = rnorm(51, 2e5, 3)
)
), formula = c("foo", "foo"))
expect_false(RHermes:::firstCleaning(1, group, blank)) #Blank-like
expect_true(RHermes:::firstCleaning(2, group, blank)) #Totally different
#Does the model work as intended?
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
library(data.table)
#Does the model work as intended?
blank <- data.table(rt = seq(0,20,0.2),
rtiv = rnorm(101, 10, 3),
formv = "foo", isov = "M0")
setkeyv(blank, "formv")
group <- dplyr::tibble(start = c(0,10), end = c(10,20),
peaks = list(
dplyr::tibble(
rt = seq(0,10,0.2),
rtiv = rnorm(51, 10, 3)
),
dplyr::tibble(
rt = seq(10,20,0.2),
rtiv = rnorm(51, 2e5, 3)
)
), formula = c("foo", "foo"))
#Check that heuristics work
expect_false(RHermes:::firstCleaning(1, group, blank)) #Blank-like
expect_true(RHermes:::firstCleaning(2, group, blank)) #Totally different
#Check that the interpolation works and the network generates the right
#result (0, meaning sample and blank are the "same")
organizeddata <- RHermes:::prepareNetInput(1, group, blank)
organizeddata <- c(organizeddata[1, ], organizeddata[2, ])
organizeddata <- rbind(organizeddata,organizeddata,organizeddata)
organizeddata <- keras::array_reshape(organizeddata,
c(nrow(organizeddata), 400),
order = "C")  #ANN input
q <- model %>% keras::predict_classes(organizeddata)
expect_true(all(q == c(0,0,0)))
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- generateIL(myHermes, 1, ILParam(filtermz = 0.1,
priorization = "yes", ad = "M+H"))
nrow(myHermes@data@MS2Exp[[1]]@IL@IL)
nrow(myHermes@data@MS2Exp[[2]]@IL@IL)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("D:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:5]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
referenceDB = "D:/MS2ID_B2R_20201113_083214.rds",
useDB = TRUE)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("E:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:5]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
referenceDB = "D:/MS2ID_B2R_20201113_083214.rds",
useDB = TRUE)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("E:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:5]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
useDB = FALSE)
nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]])
nrow(myHermes@data@MS2Exp[[2]]@Ident[[1]])
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
nrow(myHermes@data@MS2Exp[[2]]@Ident[[1]])
nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]])
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
MS2files <- list.files("E:/ABrunner Plasma/MS2data",
pattern = ".*pos.*.mzML", full.names = TRUE)[1:9]
myHermes <- processMS2(myHermes, 1, MS2files, sstype = "regular",
useDB = FALSE)
expect_equal(nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]]),  7)
nrow(myHermes@data@MS2Exp[[1]]@Ident[[1]])
nrow(myHermes@data@MS2Exp[[2]]@Ident[[1]])
p <- RHermes::RawMS2Plot(myHermes, ms2id = 2)
p <- RHermes::plotRawMS2(myHermes, ms2id = 2)
p <- RHermes::plotRawMS2(myHermes, ms2id = 1, entryid = 2)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
cos <- SOIcos(myHermes, 1)
myHermes <- removeSOI(myHermes, 1)
succeed()
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- removeSOI(myHermes, 1)
succeed()
covr::codecov()
covr::package_coverage()
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
myHermes <- readRDS(system.file("extdata",
"exampleObject.rds",
package = "RHermes"))
myHermes <- cleanSOI(myHermes, 1, 20000, TRUE)
#Performs equal to the precalculated version
nrow(myHermes@data@SOI[[1]]@SOIList)
RHermes:::setCluster()
devtools::check(args = c('--no-vignettes','--no-build-vignettes'),cran = FALSE)
covr::package_coverage()
covr::package_coverage()
BiocCheck::BiocCheck()
?BiocCheck::BiocCheck
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
struct <- readRDS(system.file("extdata", "exampleObject.rds",                       package = "RHermes"))
View(struct)
plotFidelity(struct, 1, 1)
View(struct)
View(struct@data@SOI[[1]]@SOIList)
plotFidelity(struct, 1, 9)
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
?plotSOI
BiocCheck::BiocCheck()
struct <- readRDS(system.file("extdata", "exampleObject.rds",
package = "RHermes"))
plotSS(struct, 1, 1)
plotRawMS2(struct, 1, 2)
?plotPL
?plotPL
?plotPL
?plotSOI
devtools::build_manual()
BiocCheck::BiocCheck()
ssNetwork(struct, 1, 1:9)
ssNetwork(struct, 1, 1:5)
ssNetwork(struct, 1, 1:6)
ssNetwork(struct, 1, 1:7)
ssNetwork(struct, 1, 1:7) %>% heatmap
heatmap(ssNetwork(struct, 1, 1:7))
heatmap(ssNetwork(struct, 1, 1:8))
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
RHermesIL()
SOIParam()
ILParam()
RHermesMS2Exp()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::build_manual()
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
RHermesGUI()
RHermesGUI()
library(RHermes)
RHermesGUI()
RHermesGUI()
RHermesGUI()
library(RHermes)
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
RHermesGUI()
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
Q
library(RHermes)
RHermesGUI()
Q
struct <- readRDS("D:/testGUI.rds")
plotIL(struct, 1)
struct <- generateIL(struct, 1, ILParam())
plotIL(struct, 1)
library(RHermes)
plot_ly()
library(RHermes)
RHermesGUI()
RHermesGUI()
library(RHermes)
RHermesGUI()
parseFilePaths(roots,input$files)
renderTable(parseFilePaths(roots,input$files))
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
Q
library(RHermes)
library(RHermes)
RHermesGUI()
library(RHermes)
myH <- RHermesExp
myH <- RHermesExp()
myH <- setDB(myH, admult = 2, adcharge = 2)
Ad_DB <- adlist(myH)
F_DB <- DB(myH)
i <- 1
View(Ad_DB)
f <- as.character(F_DB$fms[i])
names(F_DB)[3] <- "fms"
f <- as.character(F_DB$fms[i])
j <- apply(Ad_DB, 1, function(x) {
current_f <- f
if (x[3] != 1) current_f <- multform(current_f, as.numeric(x[3]))
if (x[6] != "FALSE") current_f <- sumform(current_f, x[6])
if (x[7] != "FALSE") current_f <- subform(current_f, x[7])
if (is.na(current_f)) return(NA)
ch <- ifelse(x[5] == "positive", "+", "-")
current_f <- paste0("[", current_f, "]",
ifelse(abs(as.numeric(x[2])) == 1,
ch,
ifelse(as.numeric(x[2]) > 0, c(x[2], ch),
c(strsplit(x[2], "-")[[1]][2], ch))
)
)
return(current_f)
})
source('~/GitHub/RHermes/R/MS1_functions.R')
j <- apply(Ad_DB, 1, function(x) {
current_f <- f
if (x[3] != 1) current_f <- multform(current_f, as.numeric(x[3]))
if (x[6] != "FALSE") current_f <- sumform(current_f, x[6])
if (x[7] != "FALSE") current_f <- subform(current_f, x[7])
if (is.na(current_f)) return(NA)
ch <- ifelse(x[5] == "positive", "+", "-")
current_f <- paste0("[", current_f, "]",
ifelse(abs(as.numeric(x[2])) == 1,
ch,
ifelse(as.numeric(x[2]) > 0, c(x[2], ch),
c(strsplit(x[2], "-")[[1]][2], ch))
)
)
return(current_f)
})
j
View(Ad_DB)
good <- which(!is.na(j))
j <- j[!is.na(j)]
envi <- strsplit(j, split = "[", fixed = TRUE) %>%
vapply(function(x) {x[[2]]}, FUN.VALUE = character(1)) %>%
strsplit(j, split = "]", fixed = TRUE) %>%
vapply(function(x) {x[[1]]}, FUN.VALUE = character(1))
charge <- abs(as.numeric(Ad_DB[good, 2]))
multiplicity <- as.numeric(Ad_DB[good,3])
adduct_delta <- as.numeric(Ad_DB[good,4])
mass <- ((F_DB$m[i] * multiplicity) + (adduct_delta / charge)) %>%
round(., digits = 5)
mass
names(F_DB)[11] <- "m"
mass <- ((F_DB$m[i] * multiplicity) + (adduct_delta / charge)) %>%
round(., digits = 5)
mass
envi
j
mass <- ((F_DB$m[i] * multiplicity + adduct_delta) / charge) %>%
round(., digits = 5)
mass
shiny::runApp('inst/app')
read_lines(file = "./inst/app/www/step1.svg", n=1)
readLines(file = "./inst/app/www/step1.svg", n = 1)
readLines(con = "./inst/app/www/step1.svg", n = 1)
library(RHermes)
runApp('inst/app')
system.file("./www/step1.svg" ,package = "RHermes")
system.file("inst/www/step1.svg" ,package = "RHermes")
system.file("inst/app/www/step1.svg" ,package = "RHermes")
system.file("inst" ,package = "RHermes")
system.file( ,package = "RHermes")
system.file("extdata", "app", "www", "step1" ,package = "RHermes")
system.file("extdata", "app", "www", "step1.svg" ,package = "RHermes")
system.file("app", "www", "step1.svg" ,package = "RHermes")
runApp('inst/app')
runApp('inst/app')
system.file("app", "www", "step1.svg", package = "RHermes")
system.file("app", "www", "step1.svg", package = "RHermes")[[1]]
runApp('inst/app')
runApp('inst/app')
library(RHermes)
RHermesGUI8
RHermesGUI()
runApp('~/GitHub/RHermes/inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp()
runApp('inst/app')
library(RHermes)
RHermesGUI()
RHermesGUI()
RHermesGUI()
library(RHermes)
RHermesGUI()
RHermesGUI()
library(RHermes)
library(RHermes)
RHermesGUI()
toReturn$dataset <- findSOI(struct$dataset, paramlist, fileidx,
blankidx)
is("hello", "character")
is("hello", "numeric")
is(RHermesExp(), "numeric")
library(RHermes)
RHermesGUI()
source('~/GitHub/RHermes/inst/app/SOI_UI.R')
install()
devtools::install()
library(RHermes)
RHermesGUI()
library(RHermes)
RHermesGUI()
RHermesGUI()
library(RHermes)
RHermesGUI()
Q
