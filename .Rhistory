farenough <- diff(x[, 1]) > limitfactor
good <- c()
for (i in seq_len(nrow(x))) {
if (i == nrow(x)) {
good <- c(good, i)
next
}
if (farenough[i]) {
good <- c(good, i)
} else {
if (x[i, 2] > x[i + 1, 2]) {
print(i)
good <- c(good, i)
}
}
}
good <- unique(good)
x <- x[good, ]
curiso <- isotopecode[which(isotopecode[, 1] %in% colnames(x)),]
x <- as.data.frame(x)
x$ID <- ""
for (i in seq_len(nrow(curiso))) {
col <- which(colnames(x) == curiso[i, 1])[1]
num <- x[, col]
tomodify <- which(num != 0)
x$ID[tomodify] <- paste0(x$ID[tomodify],
paste0(curiso[i,2], num[tomodify]))
}
x$deltam <- x[, 1] - as.numeric(unlist(x[1, 1]))
x <- x[-1, ]
View(x)
devtools::install()
devtools::build_manual()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
library(formatR)
tidy_app()
BiocCheck::BiocCheck()
tidy_app()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
source('~/GitHub/RHermes/R/General_methods.R')
myHermes <- readRDS("D:/dadesperjordi.rds")
PL(myHermes, 1)
PL(myHermes, 2)
SOI(myHermes, 2)
View(myHermes)
SOI(myHermes, 1)
IL(myHermes, 1)
myHermes
PL(myHermes, 2)
k <- PL(myHermes, 2)
View(k)
k <- PL(myHermes, 2)[[1]]
k <- PL(myHermes, 2)@peaklist
View(k)
View(k)
View(k)
MS2Data(myHermes, 1)
k <- MS2Data(myHermes, 1)
View(k)
DB(myHermes)
DB(myHermes)
adlist(myHermes)
myHermes@metadata@ExpParam@adlist
library(RHermes)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
myHermes #Shows a summary of all set parameters and object info
sessionInfo()
adlist
adlist(myHermes)
adlist(myHermes)
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
#And we will add the "M+2H" adduct
myHermes <- addAd(myHermes, "M+2H", 2*1.00727600, ch = 2, mult = 1, toadd = "H2")
library(RHermes)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
myHermes <- processMS1(myHermes,
system.file("./MS1TestData.mzML", package = "RHermes"))
system.file("./MS1TestData.mzML", package = "RHermes")
system.file("./ExtData/MS1TestData.mzML", package = "RHermes")
system.file("ExtData/MS1TestData.mzML", package = "RHermes")
View(myHermes)
RHermes::setRHermesCluster()
View(myHermes)
library(RHermes)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
Cluster(myHermes)
library(RHermes)
library(RHermes)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
Cluster(myHermes)
library(RHermes)
??Cluster
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
RHermes::RHermesGUI()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
myHermes
sessionInfo()
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
library(RHermes)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
myHermes <- cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
View(myHermes)
View(myHermes@data@SOI[[1]]@SoiList)
View(myHermes@data@SOI[[1]]@PlotDF)
View(myHermes@data@SOI[[1]]@SoiList)
View((myHermes@data@SOI[[1]]@SoiList)[[5]][[8]])
View((myHermes@data@SOI[[1]]@SoiList)[[5]][[9]])
View(myHermes)
View(myHermes@metadata@ExpParam@ionF[[2]])
View(myHermes@metadata@ExpParam@ionF[[2]])
View(myHermes@metadata@ExpParam@ionF[[1]])
install.packages("philentropy")
library(philentropy)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), c(0.1,0.2,0.3,0.4), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.1,0.2,0.3,0.4)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.2,0.3,0.4)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,0.3,0.4)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,0.3,0.00004)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,0.3,0.000000000000004)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,0.3,0.0004)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,40,0.0004)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,4000,0.0004)), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,4000,0.0004)) / sum(rev(c(0.001,0.0002,4000,0.0004))), F)
neyman_chi_sq(c(0.1,0.2,0.3,0.4), rev(c(0.001,0.0002,4000,0.0004)), F)
neyman_chi_sq(rev(c(0.001,0.0002,4000,0.0004)), c(0.1,0.2,0.3,0.4), F)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
#You could do either of these, but PL it's more direct if you just want to check
#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
myHermes <- cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
sessionInfo()
devtools::install()
devtools::install()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
#You could do either of these, but PL it's more direct if you just want to check
#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
myHermes <- cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
View(myHermes)
View(myHermes)
ILParam
ILParam()
k <- ILParam()
View(k)
SerialParam(progressbar = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
#You could do either of these, but PL it's more direct if you just want to check
#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
myHermes <- cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
#You could do either of these, but PL it's more direct if you just want to check
#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
myHermes <- cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
cleanSOI <- function(struct, soiid, minint, isofidelity) {
soiobject <- struct@data@SOI[[soiid]]
fname <- soiobject@filename
PLid <- which(struct@metadata@filenames == fname)
PL <- struct@data@PL[[PLid]]
ppm <- struct@metadata@ExpParam@ppm
soilist <- soiobject@SoiList
BiocParallelParam <- struct@metadata@cluster
##Filter by maximum intensity
intense_enough <- which(soilist$MaxInt > minint)
soilist <- soilist[intense_enough, ]
##Filter by isotopic fidelity
if (isofidelity) {
# Isotopic elution similarity
message("Computing isotopic elution similarity:")
soilist <- isoCos(soilist, PL, isothr = 0.85, BiocParallelParam)
good <- which(!(soilist$MaxInt > 1e+06 & soilist$isofound == 0))
soilist <- soilist[good, ]
with_isos <- intense_enough[good]
# Isotopic pattern similarity
message("Calculating isotopic fidelity metrics:")
isodata <- bplapply(with_isos, IsoFidelity, struct = struct,
soilist = soiid, plot = FALSE,
BPPARAM = SerialParam(progressbar = TRUE))
cos <- vapply(isodata, function(x){x[[3]]}, numeric(1))
soilist <- soilist[cos > 0.5, ]
rtmargin <- 20
# Removing confirmed isotopic signals
soilist <- soilist[order(-soilist$MaxInt), ]
message("Removing confirmed isotope entries:")
toRemove <- numeric()
for (i in seq_len(nrow(soilist))) {
isomasses <- soilist[i, ]$isodf[[1]][, 2]
st <- soilist[i, ]$start
end <- soilist[i, ]$end
#Entries in window
idx <- which(between(soilist$start, st - rtmargin, end) &
between(soilist$end, st, end + rtmargin))
entrymass <- soilist[idx, ]$mass
overlaps <- lapply(isomasses, function(x) {
#Multiply ppm range to cover possible isotope mishaps
thr <- c(x - 3 * ppm * 1e-06 * x, x + 3 * ppm * 1e-06 * x)
if (any(entrymass > thr[1] & entrymass < thr[2])) {
return(which(entrymass > thr[1] & entrymass < thr[2]))
}
return()
})
overlaps <- do.call(rbind, overlaps)
if (length(overlaps) != 0) {
idx <- idx[overlaps]
toRemove <- c(toRemove, idx)
}
}
if (length(toRemove) != 0) {soilist <- soilist[-unique(toRemove)]}
}
##Recalculate peaklist for plotting
setkeyv(soilist, c("formula"))
message("Recalculating peaklist for plotting:")
plist <- bplapply(unique(soilist$formula), recalculateDF, soilist,
BPPARAM = BiocParallelParam)
plist <- do.call(rbind, plist)
plist$isov <- rep("M0", nrow(plist))
##Annotate adducts by cosine similarity
soilist <- adCos(soilist, adthr = 0.8,
FATable = struct@metadata@ExpParam@ionF[[2]],
BiocParallelParam = BiocParallelParam)
struct@data@SOI[[soiid]]@SoiList <- soilist
struct@data@SOI[[soiid]]@PlotDF <- as.data.table(plist)
return(struct)
}
cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
isoCos <- RHermes:::isoCos
cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
library(BiocParallel)
cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
View(call)
cleanSOI <- function(struct, soiid, minint, isofidelity) {
soiobject <- struct@data@SOI[[soiid]]
fname <- soiobject@filename
PLid <- which(struct@metadata@filenames == fname)
PL <- struct@data@PL[[PLid]]
ppm <- struct@metadata@ExpParam@ppm
soilist <- soiobject@SoiList
BiocParallelParam <- struct@metadata@cluster
##Filter by maximum intensity
intense_enough <- which(soilist$MaxInt > minint)
soilist <- soilist[intense_enough, ]
##Filter by isotopic fidelity
if (isofidelity) {
# Isotopic elution similarity
message("Computing isotopic elution similarity:")
soilist <- isoCos(soilist, PL, isothr = 0.85, BiocParallelParam)
good <- which(!(soilist$MaxInt > 1e+06 & soilist$isofound == 0))
soilist <- soilist[good, ]
with_isos <- intense_enough[good]
# Isotopic pattern similarity
message("Calculating isotopic fidelity metrics:")
browser()
isodata <- bplapply(with_isos, IsoFidelity, struct = struct,
soilist = soiid, plot = FALSE,
BPPARAM = SerialParam(progressbar = TRUE))
cos <- vapply(isodata, function(x){x[[3]]}, numeric(1))
soilist <- soilist[cos > 0.5, ]
rtmargin <- 20
# Removing confirmed isotopic signals
soilist <- soilist[order(-soilist$MaxInt), ]
message("Removing confirmed isotope entries:")
toRemove <- numeric()
for (i in seq_len(nrow(soilist))) {
isomasses <- soilist[i, ]$isodf[[1]][, 2]
st <- soilist[i, ]$start
end <- soilist[i, ]$end
#Entries in window
idx <- which(between(soilist$start, st - rtmargin, end) &
between(soilist$end, st, end + rtmargin))
entrymass <- soilist[idx, ]$mass
overlaps <- lapply(isomasses, function(x) {
#Multiply ppm range to cover possible isotope mishaps
thr <- c(x - 3 * ppm * 1e-06 * x, x + 3 * ppm * 1e-06 * x)
if (any(entrymass > thr[1] & entrymass < thr[2])) {
return(which(entrymass > thr[1] & entrymass < thr[2]))
}
return()
})
overlaps <- do.call(rbind, overlaps)
if (length(overlaps) != 0) {
idx <- idx[overlaps]
toRemove <- c(toRemove, idx)
}
}
if (length(toRemove) != 0) {soilist <- soilist[-unique(toRemove)]}
}
##Recalculate peaklist for plotting
setkeyv(soilist, c("formula"))
message("Recalculating peaklist for plotting:")
plist <- bplapply(unique(soilist$formula), recalculateDF, soilist,
BPPARAM = BiocParallelParam)
plist <- do.call(rbind, plist)
plist$isov <- rep("M0", nrow(plist))
##Annotate adducts by cosine similarity
soilist <- adCos(soilist, adthr = 0.8,
FATable = struct@metadata@ExpParam@ionF[[2]],
BiocParallelParam = BiocParallelParam)
struct@data@SOI[[soiid]]@SoiList <- soilist
struct@data@SOI[[soiid]]@PlotDF <- as.data.table(plist)
return(struct)
}
cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
IsoFidelity(struct, soiid, with_isos[[1]], FALSE)
formula
CHNOSZ::makeup("C2H4NNa2O2+")
CHNOSZ::makeup("C2H4NNa2O2")
CHNOSZ::makeup("C2H4N1Na12O2")
CHNOSZ::makeup("C2H4NNa2O2+")
package_version("CHNOSZ")
packageVersion("CHNOSZ")
cleanSOI(myHermes, soiid = 1, minint = 20000, isofidelity = TRUE)
IsoFidelity(struct, soiid, with_isos[[1]], FALSE)
thermo$element
IsoFidelity(struct, soiid, with_isos[[1]], FALSE)
names(out)
data("thermo", package = "CHNOSZ")
data("thermo", package = "CHNOSZ")
data(thermo, package = "CHNOSZ")
CHNOSZ::makeup("C2H4NNa2O2+")
iinstall.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_chunk$set(collapse = TRUE)
library(RHermes)
library(RHermes)
myHermes <- RHermesExp()
myHermes <- setExpParam(myHermes, params = ExpParam(ppm = 4, res = 120000,
ion = "+"))
myHermes <- setExpParam(myHermes, template = "orbi-pos")
myHermes <- setDB(myHermes, db = "hmdb") #Loads a small HMDB subset
#We will add the "M+2H" adduct
myHermes <- addAd(myHermes, name = "M+2H", deltam = 2*1.00727600, ch = 2,
mult = 1, toadd = "H2")
#For instance, remove adducts of unused solvents
myHermes <- remAd(myHermes, c("M+DMSO+H", "M+IsoProp+H"))
knitr::kable(adlist(myHermes))
Cluster(myHermes)
#SerialParam as example, others are valid too
myHermes <- setCluster(myHermes, BiocParallel::SerialParam())
myHermes #Shows a summary of all set parameters and object info
myHermes <- processMS1(myHermes,
system.file("ExtData/MS1TestData.mzML",
package = "RHermes"))
#You could do either of these, but PL it's more direct if you just want to check
#one file:
# myHermes
PL(myHermes, 1)
s <- getSOIpar("double")
myHermes <- findSOI(myHermes, s, 1)
View(myHermes)
myHermes <- findSOI(myHermes, s, 1)
library(xcms)
xcms::peaksWithCentWave
